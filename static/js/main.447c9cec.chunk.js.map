{"version":3,"sources":["Component/Ceaser/Encryption.js","Component/Ceaser/Decryption.js","Component/Ceaser/Ceaser.js","Component/Affine/EncryptionAffine.js","Component/Affine/DecryptionAffine.js","Component/Affine/Affine.js","Component/RSA/EncryptionRsa.js","Component/RSA/DecryptionRsa.js","Component/RSA/Rsa.js","Component/Main/Main.js","Component/Heading/Heading.js","App.js","index.js"],"names":["Encryption","props","useState","newWords","setnewWords","showEncryption","setShowEncryption","Fragment","className","rows","cols","placeholder","onChange","event","target","value","trim","split","onClick","onIsKey","preventDefault","isKey","i","length","words","j","ch","x","charCodeAt","Number","keys","toString","numbers","space","type","window","location","reload","Decryption","showDecryption","setShowDecryption","Ceaser","setKeys","setIsKey","isKeyHandeller","min","max","src","title","frameborder","allow","allowfullscreen","EncryptionAffine","keyK","keyP","DecryptionAffine","k","p","m","Affine","setKeyP","setKeyK","useEffect","EncryptionRsa","enValue","setEnValue","nValue","setNValue","n","e","M","push","DecryptionRsa","decWords","setDecWords","newArray","setNewArray","singleWord","len","idx","isNaN","d","numArray","keyQ","setKeyQ","encryptionKey","setEncryptionKey","decryptionKey","setDecryptionKey","show","setShow","q","phi","gcd","a","b","y","privateAndPublic","Main","btnCeaserActive","setBtnCeaserActive","btnAffineActive","setBtnAffineActive","btnRsaActive","setBtnRsaActive","Heading","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.447c9cec.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport './Encryption.css';\n\nfunction Encryption(props) {\n\n    // props keys value\n\n    const [newWords, setnewWords] = useState([]);\n    const [showEncryption, setShowEncryption] = useState(0);\n\n    const EncryptionTextHandler = (event) => {\n        if(!showEncryption){\n            event.target.value.trim();\n            setnewWords(event.target.value.split(' '));\n        }\n      \n\n    }\n    const submitEncryptHandler = (event) => {\n        // now text is => inputEncryption\n        props.onIsKey();\n\n        event.preventDefault();\n        \n        if(props.isKey){\n             // here we convert ours given text to encrypted\n             let capitalLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n             let smallLetters = \"abcdefghijklmnopqrstuvwxyz\";\n \n \n             \n            \n         \n             for (let i = 0; i < newWords.length; i++) {\n                 let words = \"\";\n                 for (let j = 0; j < newWords[i].length; j++) {\n                     \n                     let ch = newWords[i][j]; // A\n \n                     if(ch >= 'A' && ch <= 'Z'){\n                         let x = ch.charCodeAt(0) - 'A'.charCodeAt(0);\n \n                         x = (Number(x) + Number(props.keys));\n                         if(x < 0){\n                             x = x + 26;\n                         }\n                         x = x % 26;\n                         words = words + capitalLetters[x].toString();\n                     }\n                     else if(ch >= 'a' && ch <= 'z'){\n                         let x = ch.charCodeAt(0) - 'a'.charCodeAt(0);\n                         x = (Number(x) + Number(props.keys));\n                         if(x < 0){\n                             x = x + 26;\n                         }\n                         x = x % 26;\n                         words = words + smallLetters[x].toString();\n                     }\n                    \n \n                   \n                 }\n               \n                 let numbers = \"3#5@2$8!0&5*1(7+3^9=\";\n                 let space = numbers[i%numbers.length];\n                 newWords[i] = (words + space);\n                \n                 setnewWords(newWords);\n             }\n     \n             setShowEncryption(!showEncryption);\n        }\n           \n\n        \n\n    }\n    const submitResetHandler = ()=>{\n      \n        window.location.reload();\n    }\n\n    return (\n\n        <React.Fragment>\n            <div className=\"container\">\n                <p>Enter your Text:</p>\n                <form >\n                    <textarea rows=\"5\" cols=\"30\" placeholder=\"small and capital letters 20 words\" onChange={EncryptionTextHandler}></textarea>\n                    <br />\n                 {!showEncryption &&  <button onClick={submitEncryptHandler} type=\"submit\">Encryption</button>}  \n                <button onClick={submitResetHandler} type=\"reset\">Reset</button> \n                </form>\n            </div>\n\n            <div className=\"output\">\n                <p className=\"outputHeading\"> Output Encrypted Text:</p>\n                {(showEncryption)?  <p className=\"outputArea\">{newWords}</p> : \"\"}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Encryption;","\nimport React, { useState } from 'react';\n\nfunction Decryption(props) {\n\n    // props keys value\n\n    const [newWords, setnewWords] = useState([]);\n    const [showDecryption, setShowDecryption] = useState(0);\n\n    const DecryptionTextHandler = (event) => {\n        if(!showDecryption){\n            event.target.value.trim();\n            setnewWords(event.target.value.split(' '));\n        }\n       \n\n    }\n    const submitDecryptHandler = (event) => {\n        // now text is => inputEncryption\n        props.onIsKey();\n        event.preventDefault();\n\n        if (props.isKey) {\n            // here we convert ours given text to encrypted\n            let capitalLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n            let smallLetters = \"abcdefghijklmnopqrstuvwxyz\";\n\n\n\n\n\n            for (let i = 0; i < newWords.length; i++) {\n                let words = \"\";\n                for (let j = 0; j < newWords[i].length; j++) {\n\n                    let ch = newWords[i][j]; // A\n\n                    if (ch >= 'A' && ch <= 'Z') {\n                        let x = ch.charCodeAt(0) - 'A'.charCodeAt(0);\n                        if (props.keys >= 0) {\n                            x = (Number(x) - Number(props.keys));\n                        }\n                        else {\n                            x = (Number(x) + Number(props.keys));\n                        }\n\n                        if (x < 0) {\n                            x = x + 26;\n                        }\n                        x = x % 26;\n                        words = words + capitalLetters[x].toString();\n                    }\n                    else if (ch >= 'a' && ch <= 'z') {\n                        let x = ch.charCodeAt(0) - 'a'.charCodeAt(0);\n                        if (props.keys >= 0) {\n                            x = (Number(x) - Number(props.keys));\n                        }\n                        else {\n                            x = (Number(x) + Number(props.keys));\n                        }\n                        if (x < 0) {\n                            x = x + 26;\n                        }\n                        x = x % 26;\n                        words = words + smallLetters[x].toString();\n                    }\n                    else{\n                        words = words + \" \";\n                    }\n\n\n\n                }\n              \n\n                newWords[i] = (words + \" \");\n\n                setnewWords(newWords);\n            }\n\n            setShowDecryption(!showDecryption);\n\n        }\n\n\n\n    }\n    const submitResetHandler = () => {\n\n        window.location.reload();\n    }\n\n    return (\n\n        <React.Fragment>\n            <div className=\"container\">\n                <p> Enter your Text:</p>\n                <form >\n                    <textarea rows=\"5\" cols=\"30\" placeholder=\"small and capital letters 20 words\" onChange={DecryptionTextHandler}></textarea>\n                    <br />\n                    {!showDecryption && <button onClick={submitDecryptHandler} type=\"submit\">Decryption</button>}\n                    <button onClick={submitResetHandler} type=\"reset\">Reset</button>\n                </form>\n            </div>\n\n            <div className=\"output\">\n                <p className=\"outputHeading\">Output Decrypted Text:</p>\n                {showDecryption ?  <p className=\"outputArea\">{newWords}</p>: \"\"}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Decryption;","\nimport React, { useState } from 'react';\nimport './Ceaser.css';\nimport Encryption from './Encryption';\nimport Decryption from './Decryption';\n\nfunction Ceaser() {\n\n    const [keys, setKeys] = useState(\"\");\n    const [isKey, setIsKey] = useState(0);\n    const keyHandler = (event) => {\n        setIsKey(1);\n        setKeys(event.target.value);\n    }\n    const isKeyHandeller = () => {\n\n        if (keys === \"\") {\n            setIsKey(0);\n        }\n        else {\n            setIsKey(1);;\n        }\n\n    }\n    return (\n        <React.Fragment>\n            <div className=\"headingCaesar\">\n                <span>Enter key <small>(integer) </small></span>\n                <input type=\"number\" onChange={keyHandler} min=\"-1000\" max=\"1000\" placeholder=\"0\" />\n                {!isKey ? <p className=\"warrning\">Please enter a number Key </p> : \"\"}\n            </div>\n            <div className=\"EnDePartCaesar\">\n                <div className=\"caesarEncrypt\">\n                    <Encryption keys={keys} onIsKey={isKeyHandeller} isKey={isKey} />\n                </div>\n\n                <div className=\"caesarDecrypt\">\n                    <Decryption keys={keys} onIsKey={isKeyHandeller} isKey={isKey} />\n                </div>\n\n            </div>\n\n            <div className=\"video1\">\n            <iframe  src=\"https://www.youtube.com/embed/LjFxc0Oo_ks\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n            </div>\n                </React.Fragment>\n                );\n\n}\n\n                export default Ceaser;\n","\nimport React, { useState } from 'react';\n// import './Encryption.css';\n\nfunction EncryptionAffine(props) {\n\n    // props keys value\n\n    const [newWords, setnewWords] = useState([]);\n    const [showEncryption, setShowEncryption] = useState(0);\n\n    const EncryptionTextHandler = (event) => {\n        if(!showEncryption){\n            event.target.value.trim();\n            setnewWords(event.target.value.split(' '));\n        }\n      \n\n    }\n  \n    const submitEncryptHandler = (event) => {\n        // now text is => inputEncryption\n        props.onIsKey();\n\n        event.preventDefault();\n        \n        if(props.isKey){\n             // here we convert ours given text to encrypted\n             let capitalLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n             let smallLetters = \"abcdefghijklmnopqrstuvwxyz\";\n \n \n             \n            \n         \n             for (let i = 0; i < newWords.length; i++) {\n                 let words = \"\";\n                 for (let j = 0; j < newWords[i].length; j++) {\n                     \n                     let ch = newWords[i][j]; // A\n \n                     if(ch >= 'A' && ch <= 'Z'){\n                         let x = ch.charCodeAt(0) - 'A'.charCodeAt(0);\n                         if (Number(props.keyK) >= 0) {\n                            x = ((Number(x)*Number(props.keyP)) + Number(props.keyK));\n                        }\n                        else {\n                            x = ((Number(x)*Number(props.keyP)) - Number(props.keyK));\n                        }\n                         if(x < 0){\n                             x = x + 26;\n                         }\n                         x = x % 26;\n                         words = words + capitalLetters[x].toString();\n                     }\n                     else if(ch >= 'a' && ch <= 'z'){\n                         let x = ch.charCodeAt(0) - 'a'.charCodeAt(0);\n                         if (Number(props.keyK) >= 0) {\n                            x = ((Number(x)*Number(props.keyP)) + Number(props.keyK));\n                        }\n                        else {\n                            x = ((Number(x)*Number(props.keyP)) - Number(props.keyK));\n                        }\n                         if(x < 0){\n                             x = x + 26;\n                         }\n                         x = x % 26;\n                         words = words + smallLetters[x].toString();\n                     }\n                    \n \n                   \n                 }\n                 let numbers = \"3#5@2$8!0&5*1(7+3^9=\";\n                 let space = numbers[i%numbers.length];\n                 newWords[i] = (words + space);\n                \n                 setnewWords(newWords);\n             }\n     \n             setShowEncryption(!showEncryption);\n        }\n           \n\n        \n\n    }\n    const submitResetHandler = ()=>{\n      \n        window.location.reload();\n    }\n\n    return (\n\n        <React.Fragment>\n            <div className=\"container\">\n\n                <p>Enter your Text:</p>\n                <form >\n                    <textarea rows=\"5\" cols=\"30\" placeholder=\"small and capital letters 20 words\" onChange={EncryptionTextHandler}></textarea>\n                    <br />\n                 {!showEncryption &&  <button onClick={submitEncryptHandler} type=\"submit\">Encryption</button>}  \n                <button onClick={submitResetHandler} type=\"reset\">Reset</button> \n                </form>\n            </div>\n\n            <div className=\"output\">\n                <p className=\"outputHeading\"> Output Encrypted Text:</p>\n                {(showEncryption)?  <p className=\"outputArea\">{newWords}</p> : \"\"}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default EncryptionAffine;","\nimport React, { useState } from 'react';\n\nfunction DecryptionAffine(props) {\n\n    // props keys value\n\n    const [newWords, setnewWords] = useState([]);\n    const [showDecryption, setShowDecryption] = useState(0);\n\n    const DecryptionTextHandler = (event) => {\n        if(!showDecryption){\n            event.target.value.trim();\n            setnewWords(event.target.value.split(' '));\n        }\n       \n\n    }\n    const submitDecryptHandler = (event) => {\n        // now text is => inputEncryption\n        props.onIsKey();\n        event.preventDefault();\n\n        if (props.isKey) {\n            // here we convert ours given text to encrypted\n            let capitalLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n            let smallLetters = \"abcdefghijklmnopqrstuvwxyz\";\n\n\n\n            // k and p number converted\n            let k = Number(props.keyK);\n            let p = Number(props.keyP);\n\n            for (let i = 0; i < newWords.length; i++) {\n                let words = \"\";\n                for (let j = 0; j < newWords[i].length; j++) {\n\n                    let ch = newWords[i][j]; // A\n\n                    if (ch >= 'A' && ch <= 'Z') {\n                        let x = ch.charCodeAt(0) - 'A'.charCodeAt(0);\n                        if (k >= 0) {\n                            x = (Number(x) - k);\n                        }\n                        else {\n                            x = (Number(x) + k);\n                        }\n\n                        if (x < 0) {\n                            x = x + 26;\n                        }\n\n                        // multiplayer\n                        let m;\n                        for(let i = 1; i < 10000; i++){\n                            m = (i * 26) + 1;\n                            if(m % p === 0){\n                                m = m / p;\n                                break;\n                            }\n                        }\n                        x = (x*m) % 26;\n                        words = words + capitalLetters[x].toString();\n                    }\n                    else if (ch >= 'a' && ch <= 'z') {\n                        let x = ch.charCodeAt(0) - 'a'.charCodeAt(0);\n                        if (k >= 0) {\n                            x = (Number(x) - k);\n                        }\n                        else {\n                            x = (Number(x) + k);\n                        }\n                        if (x < 0) {\n                            x = x + 26;\n                        }\n                        // multiplyer\n                        let m;\n                        for(let i = 1; i < 10000; i++){\n                            m = (i * 26) + 1;\n                            if(m % p === 0){\n                                m = m / p;\n                                break;\n                            }\n                        }\n                        x = (x*m) % 26;\n                        words = words + smallLetters[x].toString();\n                    }\n                    else{\n                        words = words + \" \";\n                    }\n\n\n\n                }\n\n                newWords[i] = (words + \" \");\n\n                setnewWords(newWords);\n            }\n\n            setShowDecryption(!showDecryption);\n\n        }\n\n\n\n    }\n    const submitResetHandler = () => {\n\n        window.location.reload();\n    }\n\n    return (\n\n        <React.Fragment>\n            <div className=\"container\">\n                <p> Enter your Text:</p>\n                <form >\n                    <textarea rows=\"5\" cols=\"30\" placeholder=\"small and capital letters 20 words\" onChange={DecryptionTextHandler}></textarea>\n                    <br />\n                    {!showDecryption && <button onClick={submitDecryptHandler} type=\"submit\">Decryption</button>}\n                    <button onClick={submitResetHandler} type=\"reset\">Reset</button>\n                </form>\n            </div>\n\n            <div className=\"output\">\n                <p className=\"outputHeading\">Output Decrypted Text:</p>\n                {showDecryption ?  <p className=\"outputArea\">{newWords}</p>: \"\"}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default DecryptionAffine;","\nimport React, { useState, useEffect } from 'react';\nimport './Affine.css';\nimport Encryption from './EncryptionAffine';\nimport Decryption from './DecryptionAffine';\n\nfunction Affine() {\n\n    const [keyP, setKeyP] = useState(\"\");\n    const [keyK, setKeyK] = useState(\"\");\n    const [isKey, setIsKey] = useState(0);\n\n    const keyPHandler = (event) => {\n\n        setKeyP(event.target.value);\n       \n    }\n    const keyKHandler = (event) => {\n       \n\n        setKeyK(event.target.value);\n    }\n\n    useEffect(()=>{\n        if(keyP !== \"\" && keyK !==\"\"){\n            setIsKey(1);\n        }\n       \n    }, [keyP, keyK ]);\n    \n   \n    const isKeyHandeller = () => {\n\n        if (keyP === \"\" || keyK === \"\") {\n            setIsKey(0);\n        }\n        else {\n            setIsKey(1);;\n        }\n\n    }\n    return (\n        <React.Fragment>\n            <div className=\"headingCaesar\">\n                <p>f(x) = px + k </p>\n                <span>Enter key <small>(int) </small>p = </span>\n                <input type=\"number\" onChange={keyPHandler} min=\"-1000\" max=\"1000\" placeholder=\" 3, 5, 7...\" />\n                <span> and K = </span>\n                <input type=\"number\" onChange={keyKHandler} min=\"-1000\" max=\"1000\" placeholder=\"0\" />\n                {!isKey ? <p className=\"warrning\">Please enter a number Key </p> : \"\"}\n            </div>\n            <div className=\"EnDePartCaesar\">\n                <div className=\"caesarEncrypt\">\n                    <Encryption keyP={keyP} keyK = {keyK}onIsKey={isKeyHandeller} isKey={isKey} /> \n                </div>\n\n                <div className=\"caesarDecrypt\">\n                    <Decryption keyP={keyP} keyK={keyK} onIsKey={isKeyHandeller} isKey={isKey} /> \n                </div>\n\n            </div>\n\n            <div className=\"video1\">\n            <iframe  src=\"https://www.youtube.com/embed/LjFxc0Oo_ks\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n            </div>\n\n        </React.Fragment>\n    );\n\n}\n\nexport default Affine;\n","\nimport React, { useState, useEffect } from 'react';\nimport './EncryptionRsa.css';\n\nfunction EncryptionRsa(props) {\n\n    // props keys value\n\n    const [newWords, setnewWords] = useState([]);\n    const [showEncryption, setShowEncryption] = useState(0);\n    const [isKey, setIsKey] = useState(0);\n    const [enValue, setEnValue] = useState(\"\");\n    const [nValue, setNValue] = useState(\"\");\n  \n    const EncryptionTextHandler = (event) => {\n        if (!showEncryption) {\n            event.target.value.trim();\n            setnewWords(event.target.value.split(' '));\n        }\n\n    }\n\n\n    const keyEHandler = (event)=>{\n        setEnValue(event.target.value);\n    }\n    const keyNHandler = (event)=>{\n        setNValue(event.target.value);\n    }\n\n\n    useEffect(() => {\n        if (enValue !== \"\" && nValue !== \"\") {\n            setIsKey(1);\n        }\n        else if(enValue === \"\" || nValue === \"\"){\n            setIsKey(0);\n        }\n    }, [enValue, nValue]);\n\n    const submitEncryptHandler = (event) => {\n        // now text is => inputEncryption\n\n        event.preventDefault();\n\n     \n        if (isKey && newWords.length > 0) {\n\n\n\n\n\n            for (let i = 0; i < newWords.length; i++) {\n                let words = [];\n                for (let j = 0; j < newWords[i].length; j++) {\n\n                    let ch = newWords[i][j]; // A\n                    let n;\n                    let e;\n                    let x;\n\n                    if (ch >= 'A' && ch <= 'Z') {\n\n                        x = ch.charCodeAt(0) - 'A'.charCodeAt(0);\n                    \n                    }\n                    else if (ch >= 'a' && ch <= 'z') {\n                        x = ch.charCodeAt(0) - 'a'.charCodeAt(0);\n                    }\n                      \n                    x = (Number(x) + 1); \n                    e = Number(enValue);\n                    n = Number(nValue);\n                    let M = 1;\n                    for(let i = 1; i <= e; i++){\n                        M = (M * x) % n;;\n                    }\n                   \n                  \n                    words.push(M);\n                    words.push(\" \");\n\n\n                }\n                let numbers = \"#a@BT$&AK*R)a;d;alk)+!=@#A^#+\";\n                let space = numbers[i % numbers.length];\n                words.push(space);\n                words.push(\" \");\n                newWords[i] = words\n\n                setnewWords(newWords);\n            }\n\n            setShowEncryption(!showEncryption);\n        }\n\n\n\n\n    }\n    const submitResetHandler = () => {\n\n        window.location.reload();\n    }\n\n    return (\n\n        <React.Fragment>\n            <div className=\"container\">\n                <div className=\"headingCaesar\">\n\n                    <span> Public Key = </span>\n                    <input type=\"number\" onChange={keyEHandler} min=\"-1000\" max=\"1000\" placeholder=\"0\" />\n                    <span> and N = </span>\n                    <input type=\"number\" onChange={keyNHandler} min=\"-1000\" max=\"1000\" placeholder=\"0\" />\n                    <br />\n                    {!isKey ? <span className=\"warrning\">Enter key and N</span> : \"\"}\n                </div>\n                <p>Enter your Text:</p>\n                <form >\n                    <textarea rows=\"5\" cols=\"30\" placeholder=\"small and capital letters 20 words\" onChange={EncryptionTextHandler}></textarea>\n                    <br />\n                    {!showEncryption && <button onClick={submitEncryptHandler} type=\"submit\">Encryption</button>}\n                    <button onClick={submitResetHandler} type=\"reset\">Reset</button>\n                </form>\n            </div>\n\n            <div className=\"output\">\n                <p className=\"outputHeading\"> Output Encrypted Text:</p>\n                {(showEncryption) ? <p className=\"outputArea\">{newWords}</p> : \"\"}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default EncryptionRsa;","\nimport React, { useState, useEffect } from 'react';\nimport './DecryptionRsa.css';\n\nfunction DecryptionRsa(props) {\n\n    // props keys value\n    const [decWords, setDecWords] = useState([]);\n    const [newWords, setnewWords] = useState([]);\n    const [showEncryption, setShowEncryption] = useState(0);\n    const [isKey, setIsKey] = useState(0);\n    const [enValue, setEnValue] = useState(\"\");\n    const [nValue, setNValue] = useState(\"\");\n     const [newArray, setNewArray] = useState([]);\n    //console.log(newWords);\n    const EncryptionTextHandler = (event) => {\n        if (!showEncryption) {\n            event.target.value.trim();\n            setnewWords(event.target.value.split(' '));\n        }\n\n    }\n\n\n    const keyEHandler = (event)=>{\n        setEnValue(event.target.value);\n    }\n    const keyNHandler = (event)=>{\n        setNValue(event.target.value);\n    }\n\n\n    useEffect(() => {\n        if (enValue !== \"\" && nValue !== \"\") {\n            setIsKey(1);\n        }\n        else if(enValue === \"\" || nValue === \"\"){\n            setIsKey(0);\n        }\n    }, [enValue, nValue]);\n\n    const submitEncryptHandler = (event) => {\n        // now text is => inputEncryption\n\n        event.preventDefault();\n\n        if(isKey && newWords.length > 0) {\n        // convert word by word\n        let  singleWord = [];\n        let len = newWords.length;\n        let idx = 0;\n        for(let i = 0; i < len; i++){\n            let x = newWords[i];\n            if(!isNaN(x)){\n                \n                singleWord.push(x);\n               \n            }\n            else{\n                \n                newArray[idx++] = singleWord;\n                 setNewArray(newArray);\n                singleWord = [];\n            }\n        }\n        \n       \n            // here we convert ours given text to encrypted\n            // let capitalLetters = \"@ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n            let smallLetters = \"@abcdefghijklmnopqrstuvwxyz\";\n\n            \n            for (let i = 0; i < newArray.length; i++) {\n                let words = \"\";\n                for (let j = 0; j < newArray[i].length; j++) {\n\n                    let numArray = newArray[i][j]; // A\n                    let n;\n                    let d;\n                    let M;  \n                    numArray = Number(numArray);\n                    d = Number(enValue);\n                    n = Number(nValue);\n                    // console.log(numArray);\n                    // console.log(d);\n                    //  M = Math.pow(numArray, d) % n;\n                    M = 1;\n                     for(let i = 1; i <= d; i++){\n                         M = (M * numArray) % n;;\n                     }\n                    \n                    // console.log(M);\n                  \n                  try{\n                    words = words + smallLetters[M].toString();\n                  }\n                  catch(e){\n                    window.location.reload();\n                  }\n                   \n\n                }\n            \n                \n             \n               decWords[i] = words + \" \";\n\n                setDecWords(decWords);\n              \n            }\n\n            setShowEncryption(!showEncryption);\n        }\n\n\n    }\n    const submitResetHandler = () => {\n\n        window.location.reload();\n    }\n\n    return (\n\n        <React.Fragment>\n            <div className=\"container RsaMargin\">\n                <div className=\"headingCaesar\">\n\n                    <span> Private Key = </span>\n                    <input type=\"number\" onChange={keyEHandler} min=\"-1000\" max=\"1000\" placeholder=\"0\" />\n                    <span> and N = </span>\n                    <input type=\"number\" onChange={keyNHandler} min=\"-1000\" max=\"1000\" placeholder=\"0\" />\n                    <br />\n                    {!isKey ? <span className=\"warrning\">Enter key and N</span> : \"\"}\n                </div>\n                <p>Enter your Text:</p>\n                <form >\n                    <textarea rows=\"5\" cols=\"30\" placeholder=\"small and capital letters 20 words\" onChange={EncryptionTextHandler}></textarea>\n                    <br />\n                    {!showEncryption && <button onClick={submitEncryptHandler} type=\"submit\">Decryption</button>}\n                    <button onClick={submitResetHandler} type=\"reset\">Reset</button>\n                </form>\n            </div>\n\n            <div className=\"output\">\n                <p className=\"outputHeading\"> Output Decrypted Text:</p>\n                {(showEncryption) ? <p className=\"outputArea\">{decWords}</p> : \"\"}\n            </div>\n            \n        </React.Fragment>\n    );\n}\n\nexport default DecryptionRsa;","\nimport React, { useState } from 'react';\nimport './Rsa.css';\nimport Encryption from './EncryptionRsa';\nimport Decryption from './DecryptionRsa';\n\nfunction Affine() {\n\n    const [keyP, setKeyP] = useState(\"\");\n    const [keyQ, setKeyQ] = useState(\"\");\n    const [isKey, setIsKey] = useState(0);\n    const [encryptionKey, setEncryptionKey] = useState(0);\n    const [decryptionKey, setDecryptionKey] = useState(0);\n    const [nValue, setNValue] = useState(0);\n    const [show, setShow] = useState(0);\n\n    const keyPHandler = () => {\n        setKeyP(5);\n        setKeyQ(11);\n        setIsKey(1);\n    }\n    const keyQHandler = () => {\n        setKeyP(47);\n        setKeyQ(101);\n        setIsKey(1);\n    }\n\n\n\n\n\n    const privateAndPublic = (p, q) => {\n\n        let n = p * q;\n        let phi = (p - 1) * (q - 1);\n        let e = 2;\n\n        // find e\n        const gcd = (a, b) => {\n            if (!b) {\n                return a;\n            }\n            return gcd(b, a % b);\n        }\n        while (e < phi) {\n            if (gcd(e, phi) === 1) {\n                break;\n            }\n            else {\n                e++;\n            }\n        }\n\n        // find d\n        let d;\n        for (let i = 0; i <= 10000; i++) {\n\n            let y = ((phi * i) + 1);\n            if (y % e === 0) {\n                d = y / e;\n                break;\n            }\n        }\n\n        setEncryptionKey(e);\n        setDecryptionKey(d);\n        setNValue(n);\n        setShow(1);\n\n    }\n\n\n\n\n    const generateKeyHandeler = () => {\n        let p, q;\n        p = Number(keyP);\n        q = Number(keyQ);\n\n        privateAndPublic(p, q);\n\n    }\n\n\n\n    return (\n        <React.Fragment>\n            <div className=\"headingCaesar\">\n\n            </div>\n            <div className=\"generateKey\">\n               {!isKey ? <button onClick={keyPHandler} >Easy</ button> :\"\" }\n               {!isKey ? <button onClick={keyQHandler} >Medium</button> : \"\"} \n               {isKey ? <button onClick={generateKeyHandeler}>Generate key</button> : \"\"}\n            </div>\n            {show ? <div className=\"showKey\">\n                <span>N = {nValue}</span> < br />\n                <span>Public Key =  {encryptionKey} </span> <br />\n                <span>Private Key = {decryptionKey} </span>\n\n            </div> : \"\"}\n            {show ? <div className=\"EnDePartCaesar\">\n                <div className=\"caesarEncrypt\">\n                    <Encryption />\n                </div>\n\n                <div className=\"caesarDecrypt\">\n                    <Decryption />\n                </div>\n\n            </div> : \"\"}\n\n            <div className=\"video1\">\n            <iframe  src=\"https://www.youtube.com/embed/LjFxc0Oo_ks\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n            </div>\n\n        </React.Fragment>\n    );\n\n}\n\nexport default Affine;\n","\nimport React, {useState} from 'react';\nimport Ceaser from '../Ceaser/Ceaser';\nimport './Main.css';\nimport Affine from '../Affine/Affine';\nimport RSA from '../RSA/Rsa';\n\nfunction Main(){\n\n    const [btnCeaserActive, setBtnCeaserActive] = useState(1);\n    const [btnAffineActive, setBtnAffineActive] = useState(0);\n    const [btnRsaActive, setBtnRsaActive] = useState(0);\n\n\n    const btnCeaserHandler = () =>{\n        \n        setBtnCeaserActive(1);\n        setBtnAffineActive(0);\n        setBtnRsaActive(0);\n    }\n    const btnAffineHandler = () =>{\n        setBtnCeaserActive(0);\n        setBtnAffineActive(1);\n        setBtnRsaActive(0);\n    }\n    const btnRsaHandler = () =>{\n        setBtnCeaserActive(0);\n        setBtnAffineActive(0);\n        setBtnRsaActive(1);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"NavBar\">\n                <button className={btnCeaserActive ?\"activeButton\":\"NavButton\"} onClick={btnCeaserHandler}>Caesar</button>\n                <button className={btnAffineActive ?\"activeButton\":\"NavButton\"} onClick={btnAffineHandler}>Affine</button>\n                <button className={btnRsaActive ?\"activeButton\":\"NavButton\"} onClick={btnRsaHandler}>RSA</button>           \n            </div>\n            {btnCeaserActive ? <Ceaser /> : \"\"}\n            {btnAffineActive ? <Affine /> : \"\"}\n            {btnRsaActive ? <RSA /> : \"\"}\n\n        </React.Fragment>\n    \n    );\n\n}\n\nexport default Main;","\nimport React from 'react';\nimport './Heading.css';\n\nfunction Heading(){\n    return (\n        <React.Fragment>\n\n                <div className=\"Heading\">\n                    <p>Encryption and Decryption</p>\n                </div>\n\n        </React.Fragment>\n    );\n}\n\nexport default Heading;","\nimport React from 'react';\nimport './App.css';\nimport Main from './Component/Main/Main';\nimport Heading from './Component/Heading/Heading';\nfunction App() {\n  return (\n    <React.Fragment>\n      <Heading />\n      <Main />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}